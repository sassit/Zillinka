scilla_version 0

(************************************************************************************)
(* Oracle: serves client requests through transition: request(date: String)         *)
(*         emits an event with the request details, stores the request internally   *)
(*         by assigning it a request_id storing the initiator (the client's addr)   *)
(*         and the date received with the request                                   *)
(*         receives data through                                                    *)
(*           set_data(data: Uint128, request_id: Uint32)                            *)
(*         stores it internally (mostly for testing purpose) under the request_id   *)
(*         and sends it back to the client by sending a message to its callback:    *)
(*           callback_data(data: Uint32, date: String)                              *)
(************************************************************************************)

(*import ListUtils IntUtils BoolUtils *)

library Oracle

let zero128 = Uint128 0 (* used for zero amounts *)

type DataRequest = (* requestor, date, [result] *)
  | DataRequest of ByStr20 String (Option Uint128)

let get_requestor = fun(request: DataRequest) =>
  match request with
  | DataRequest requestor argument result_o => requestor
  end

let get_date = fun(request: DataRequest) =>
  match request with
  | DataRequest requestor date result_o => date
  end

let one_msg = (* Wrap single message into singleton list *)
  fun (msg : Message) =>
    let nil_msg = Nil {Message} in
    Cons {Message} msg nil_msg

contract Oracle
()

field next_request_id: Uint32 = Uint32 0 (* keep track of requests by increasig the counter *)
field data_requests: Map Uint32 DataRequest = Emp Uint32 DataRequest (* m[req_id] = (requestor, date, [result]) *)



(* @notice: request data from an oracle                 *)
(* @param:  date: in format "yyyy-mm-dd"                *)
transition request(date: String)
  request_id <- next_request_id;
  no_result = None {Uint128};
  request = DataRequest _sender date no_result;
  data_requests[request_id] := request;
  one32 = Uint32 1;
  next_id = builtin add request_id one32;
  next_request_id := next_id;
  ev = {_eventname : "request"; requestId: request_id; date: date; initiator: _sender};
  event ev
end


(* @notice: give the oracle some (off-chain) data                   *)
(* @param:  data: the data (e.g. a gauge level)                     *)
(* @param:  req_id: the unique request id                           *)
transition set_data(data: Uint128, request_id: Uint32)
  req_o <- data_requests[request_id];
  match req_o with
  |None =>
    err = {_exception: "set_data: request does not exist in map"; requestId: request_id};
    throw err
  |Some request => (* emit and callback the requestor with the data *)
    to = get_requestor request;
    date = get_date request;
    res_o = Some {Uint128} data;
    request_with_result = DataRequest to date res_o;
    data_requests[request_id] := request_with_result; (* store in state, mostly for testing *)
    msg = {_tag: "callback_data"; _recipient: to; _amount: zero128; data: data; date: date};
    msgs = one_msg msg;
    send msgs
  end (* job_o *)
end
